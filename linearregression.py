# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CMb5jNhTSOXA2bO05Okr632NSnlrYzLi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("/content/Fish.csv")
y = df['Species']
x = df[['Weight','Length1','Length2','Length3','Height','Width']]

for i in x:
  plt.scatter(x[i],y)
  plt.xlabel(i)
  plt.ylabel('Species')
  plt.show()

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load the data
df = pd.read_csv("/content/Fish.csv")

# Label Encoding for 'Species'
le = LabelEncoder()
df['Species_Encoded'] = le.fit_transform(df['Species'])

# Extract features and target variable
y = df['Species_Encoded']
x = df[['Weight', 'Length1', 'Length2', 'Length3', 'Height', 'Width']]

# Create and train the Linear Regression model
model = LinearRegression()
model.fit(x, y)

# Make predictions on the training data
predictions = model.predict(x)

# Evaluate the model (using Mean Squared Error)
mse = mean_squared_error(y, predictions)
print("Mean Squared Error:", mse*100)

# Print the learned coefficients
print("Learned Coefficients (Intercept, Weight, Length1, Length2, Length3, Height, Width):",
      [model.intercept_] + list(model.coef_))

# Make predictions on new data
new_x = np.array([[200, 25, 27, 29, 10, 5]])  # Example new data point
new_prediction = model.predict(new_x)

# Decode the prediction back to the original species label
predicted_species = le.inverse_transform([int(round(new_prediction[0]))])
print("Prediction for new data:", predicted_species[0])



plt.figure(figsize=(8, 6))  # Set figure size
plt.scatter(y, predictions, alpha=0.5)  # Scatter plot with transparency
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', lw=2)  # Ideal prediction line
plt.xlabel("Original Species (Encoded)")
plt.ylabel("Predicted Species (Encoded)")
plt.title("Predicted vs. Original Species")
plt.grid(True)
plt.show()



import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/Fish.csv")

# Label Encoding for 'Species'
le = LabelEncoder()
df['Species_Encoded'] = le.fit_transform(df['Species'])

# Extract features and target variable
y = df['Species_Encoded']
x = df[['Weight', 'Length1', 'Length2', 'Length3', 'Height', 'Width']]

# Create and train the Linear Regression model
model = LinearRegression()
model.fit(x, y)

# Make predictions on the training data
predictions = model.predict(x)

# --- Add noise to predictions ---
noise_level = 5  # Adjust this value to control the noise level
noise = np.random.normal(scale=noise_level, size=predictions.shape)
noisy_predictions = predictions + noise

# --- Plotting predicted vs. original values with noise ---
plt.figure(figsize=(8, 6))
plt.scatter(y, noisy_predictions, alpha=0.5)  # Alpha for transparency
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', lw=2)  # Red dashed line for ideal prediction
plt.xlabel("Original Species (Encoded)")
plt.ylabel("Predicted Species (Encoded) with Noise")
plt.title("Predicted vs. Original Species (with Noise)")
plt.grid(True)
plt.show()

# ... (rest of the code remains the same)